{"version":3,"sources":["MarkdownView.js","MiniEditor.js","serviceWorker.js","index.js"],"names":["MarkdownView","state","content","marked","setOptions","breaks","react_default","a","createElement","Card","className","CardBody","CardTitle","CardText","dangerouslySetInnerHTML","__html","this","props","textIn","id","Row","Button","color","onClick","copy","clear","Component","placeHolder","MiniEditor","handleChange","e","_this","setState","target","value","handleClear","handleCopy","document","getElementById","select","execCommand","Container","FormGroup","style","height","Label","for","Input","type","name","onChange","src_MarkdownView","Boolean","window","location","hostname","match","ReactDOM","render","src_MiniEditor","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4UA2BeA,6MAtBXC,MAAQ,CACJC,QAAS,4EAIT,OADAC,IAAOC,WAAW,CAACC,QAAQ,IAEvBC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,UAAU,gBACZJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAUD,UAAU,aAChBJ,EAAAC,EAAAC,cAACI,EAAA,EAAD,yBACAN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAUC,wBAAyB,CAACC,OAAQZ,IAAOa,KAAKC,MAAMC,SAAUR,UAAU,SAASS,GAAG,YAC9Fb,EAAAC,EAAAC,cAACY,EAAA,EAAD,KACId,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAQC,MAAM,UAAUZ,UAAU,OAAOa,QAASP,KAAKC,MAAMO,MAA7D,QACAlB,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAASP,KAAKC,MAAMQ,OAA5C,oBAdDC,aCArBC,EAAW,kwCA8EFC,6MA9Bb3B,MAAQ,CACNC,QAASyB,KAGXE,aAAe,SAACC,GACdC,EAAKC,SAAS,CAAC9B,QAAS4B,EAAEG,OAAOC,WAEnCC,YAAc,WACZJ,EAAKC,SAAS,CAAC9B,QAAS,QAE1BkC,WAAa,WACIC,SAASC,eAAe,UAC9BC,SACTF,SAASG,YAAY,iFAGrB,OACElC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAW/B,UAAU,mBACnBJ,EAAAC,EAAAC,cAACkC,EAAA,EAAD,CAAWhC,UAAU,OAAOiC,MAAO,CAACC,OAAQ,SACxCtC,EAAAC,EAAAC,cAACqC,EAAA,EAAD,CAAOC,IAAI,SAASpC,UAAU,0BAAyBJ,EAAAC,EAAAC,cAAA,8BACvDF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,2CACbJ,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAAOC,KAAK,WAAWC,KAAK,OAAO9B,GAAG,SAAST,UAAU,wBAAwBwC,SAAUlC,KAAKa,aAAcK,MAAOlB,KAAKf,MAAMC,YAGtII,EAAAC,EAAAC,cAAC2C,EAAD,CAAcjC,OAAQF,KAAKf,MAAMC,QAASuB,MAAOT,KAAKmB,YAAaX,KAAMR,KAAKoB,qBAzB7DV,aCvCL0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAAgBtB,SAASC,eAAe,SD0HlD,kBAAmBsB,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7993bb0b.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport { Row, Card, CardText, CardBody, CardTitle, Button } from 'reactstrap';\r\nimport marked from 'marked';\r\n\r\nclass MarkdownView extends Component {\r\n    state = {\r\n        content: ''\r\n    }\r\n    render() {\r\n        marked.setOptions({breaks: true})\r\n        return (\r\n            <div>\r\n                <Card className=\"shadow h-100\">\r\n                    <CardBody className=\"min-h-100\">\r\n                        <CardTitle>Markdown Preview</CardTitle>\r\n                        <CardText dangerouslySetInnerHTML={{__html: marked(this.props.textIn)}} className=\"border\" id=\"preview\"></CardText>\r\n                        <Row>\r\n                            <Button color=\"primary\" className=\"mx-5\" onClick={this.props.copy}>Copy</Button>\r\n                            <Button color=\"primary\" onClick={this.props.clear}>Clear</Button>\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MarkdownView;","import React, {Component} from 'react';\nimport {Container, FormGroup, Label, Input} from 'reactstrap';\nimport MarkdownView from './MarkdownView';\n\nconst placeHolder = \n  `# Welcome to my React Markdown Previewer!\n\n  ## This is a sub-heading...\n  ### And here's some other cool stuff:\n    \n  Heres some code, \\`<div></div>\\`, between 2 backticks.\n  \n  \\`\\`\\`\n  // this is multi-line code:\n  \n  function anotherExample(firstLine, lastLine) {\n    if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n      return multiLineCode;\n    }\n  }\n  \\`\\`\\`\n    \n  You can also make text **bold**... whoa!\n  Or _italic_.\n  Or... wait for it... **_both!_**\n  And feel free to go crazy ~~crossing stuff out~~.\n  \n  There's also [links](https://www.freecodecamp.com), and\n  > Block Quotes!\n  \n  And if you want to get really crazy, even tables:\n  \n  Wild Header | Crazy Header | Another Header?\n  ------------ | ------------- | ------------- \n  Your content can | be here, and it | can be here....\n  And here. | Okay. | I think we get it.\n  \n  - And of course there are lists.\n    - Some are bulleted.\n       - With different indentation levels.\n          - That look like this.\n  \n  \n  1. And there are numbererd lists too.\n  1. Use just 1s if you want! \n  1. But the list goes on...\n  - Even if you use dashes or asterisks.\n  * And last but not least, let's not forget embedded images:\n  \n  ![React Logo w/ Text](https://goo.gl/Umyytc)`\n\nclass MiniEditor extends Component {\n  state = {\n    content: placeHolder\n  }\n  \n  handleChange = (e) => {\n    this.setState({content: e.target.value});\n  }\n  handleClear = () => {\n    this.setState({content: ''});\n  }\n  handleCopy = () => {\n    let copyText = document.getElementById('editor');\n    copyText.select();\n    document.execCommand('copy');\n  }\n  render() {\n    return (\n      <Container className=\"MiniEditor mb-4\">\n        <FormGroup className=\"mt-3\" style={{height: '40vh'}}>\n            <Label for=\"editor\" className=\"text-center w-100 mt-3\"><h1>Markdown Editor</h1></Label>\n            <div className=\"d-flex justify-content-center h-100 row\">\n              <Input type=\"textarea\" name=\"text\" id=\"editor\" className=\"mt-3 w-75 h-75 shadow\" onChange={this.handleChange} value={this.state.content}/>\n            </div>\n        </FormGroup>\n        <MarkdownView textIn={this.state.content} clear={this.handleClear} copy={this.handleCopy}/>\n      </Container>\n    );\n  }\n}\n\nexport default MiniEditor;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MiniEditor from './MiniEditor';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<MiniEditor />, document.getElementById('root'));\n\n// If you want your MiniEditor to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}